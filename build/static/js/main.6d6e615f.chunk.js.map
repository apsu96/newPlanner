{"version":3,"sources":["Store.ts","Store2.ts","ActionForm.tsx","PlanningChart.tsx","MemoryOverlay.tsx","Planning.tsx","Clock.tsx","ActionList.tsx","EmotionChart.tsx","DonePlansChart.tsx","MyDay.tsx","WeeklyReport.tsx","Statistics.tsx","Profile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","memoryLocalStorageKey","LOCALSTORAGE_KEY","ServerStore","actionCards","profile","makeAutoObservable","this","name","a","axios","get","headers","Token","localStorage","getItem","res","serverCards","data","map","card","push","id","Id","actionName","ActionName","expectedDuration","ExpectedDuration","isWork","IsWork","date","Date","realDuration","RealDuration","emotion","Emotion","isDone","IsDone","actionCard","toString","post","then","response","action","updatedCard","filter","catch","_","console","log","workActionCards","sortPlanner","notWorkActionCards","totalMins1","arr","split","totalMins2","background","expectedDur","realDur","expectedDurArr","unDone","done","days","today","moment","before","clone","subtract","isSameOrAfter","isSameOrBefore","time","value","updateActionCard","val","removedCard","message","getActionCards","finilisedActionCards","cards","finilisedCard","json","JSON","stringify","LocalStorageStore","parse","actions","save","clearData","savedData","setItem","clear","Store2","store","showOverlay","removeItem","ActionForm","observer","list","isResEmpty","length","Option","Select","key","plans","style","maxWidth","backgroundColor","defaultValue","onChange","event","changeActionName","target","duration","changeExpectedDuration","category","width","Work","Rest","changeIsWork","remove","onClick","removeActionCard","className","bordered","size","columns","title","dataIndex","dataSource","height","pagination","pageSize","hideOnSinglePage","position","chartData","datasets","label","preparePlanningChart","borderColor","borderWidth","labels","datasetIdKey","Math","random","type","options","color","font","family","MemoryOverlay","useState","username","setUsername","password","setPassword","regUsername","setRegUsername","regPassword","setRegPassword","errorMessage","setErrorMessage","errorMessageAuth","setErrorMessageAuth","showRegForm","setShowRegForm","useEffect","setStore","setShowOverlay","getUsername","visible","centered","closable","maskClosable","footer","textAlign","direction","placeholder","userCard","token","err","status","locale","Planning","Form","useForm","form","setVal","stringDate","format","currentDate","initActionForm","nanoid","adder","setAdder","menu","removeDatedActionCards","removeAllActionCards","overlay","placement","trigger","icon","EllipsisOutlined","border","localeUtils","MomentLocaleUtils","layout","onFinish","values","addActionCard","resetFields","Item","fontFamily","fontWeight","rules","required","getFieldValue","validator","Promise","reject","resolve","showNow","optionFilterProp","htmlType","Clock","isButtonDisabled","clock","clockEnabled","setClockEnabled","timerId","setInterval","changeRealDuration","clearInterval","floor","disabled","PauseOutlined","CaretRightOutlined","ActionList","stopwatch","changeEmotion","completeActionCard","stringEmotion","badEmotionCards","middleEmotionCards","goodEmotionCards","badEmotion","reduce","acc","middleEmotion","goodEmotion","prepareEmotionChart","DonePlansChart","prepareDonePlansChart","isNaN","MyDay","ReportType","stringCategory","data1","actionCardsForSomePeriod","PrepareDataChart","chartData1","chartData2","chartData3","prepareCategoryChart","minHeight","Statistics","statistics","setStatistics","Monthly","Annually","Weekly","Profile","exampleMenu","text","setProfile","clearStore","minimal","UserOutlined","App","to","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d6e615f.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport moment from \"moment\";\nimport \"moment/locale/ru\";\nimport axios from \"axios\";\nexport const memoryLocalStorageKey = \"memory\";\nexport const tokenLocalStorageKey = \"token\";\nexport enum ActionType {\n  Work = \"Work\",\n  Rest = \"Leisure\",\n}\n\nexport interface ActionCard {\n  id: string;\n  actionName: string;\n  expectedDuration: string;\n  isWork: boolean;\n  date: string;\n  realDuration: number;\n  emotion: string;\n  isDone: boolean;\n}\n\nexport interface ServerActionCard {\n  ActionName: string;\n  ExpectedDuration: string;\n  IsWork: string;\n  Date: string;\n  RealDuration: number;\n  Emotion: string;\n  IsDone: string;\n  Id: string;\n}\n\nexport default interface Store {\n  actionCards: Array<ActionCard>;\n  profile: string;\n  setProfile(name: string): void;\n  getActionCards(): Promise<void>;\n  getUsername(): Promise<void>;\n  addActionCard(actionCard: ActionCard): void;\n  preparePlanningChart(date: string): number[];\n  prepareDonePlansChart(date: string): number[];\n  actionCardsForSomePeriod(days: number): ActionCard[];\n  sortPlanner(date: string): ActionCard[];\n  changeRealDuration(id: string, time: number): void;\n  changeEmotion(id: string, value: string): void;\n  changeActionName(id: string, val: string): void;\n  changeExpectedDuration(id: string, val: string): void;\n  changeIsWork(id: string, val: boolean): void;\n  removeActionCard(id: string): void;\n  removeDatedActionCards(date: string): void;\n  removeAllActionCards(): void;\n  completeActionCard(id: string): void;\n  completeFinilisedActions(id: string): void;\n  updateActionCard(id: string): void;\n}\n\nexport const LOCALSTORAGE_KEY = \"data\";\n\nexport class ServerStore implements Store {\n  actionCards: Array<ActionCard> = [];\n  profile = \"\";\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setProfile(name: string) {\n    this.profile = name;\n  }\n\n  async getActionCards() {\n    const res = await axios.get(\"/get_todo\", {\n      headers: { Token: localStorage.getItem(\"token\") || \"\" },\n    });\n    const serverCards = res.data;\n    if (res.data === null) {\n      this.actionCards = [];\n      return;\n    } else {\n      serverCards.map((card: ServerActionCard) => {\n        this.actionCards.push({\n          id: card.Id,\n          actionName: card.ActionName,\n          expectedDuration: card.ExpectedDuration,\n          isWork: card.IsWork === \"true\" ? true : false,\n          date: card.Date,\n          realDuration: card.RealDuration,\n          emotion: card.Emotion,\n          isDone: card.IsDone === \"true\" ? true : false,\n        });\n        return this.actionCards;\n      });\n    }\n  }\n\n  async getUsername() {\n    const res = await axios.get(\"/get_username\", {\n      headers: { Token: localStorage.getItem(\"token\") || \"\" },\n    });\n    this.profile = res.data;\n  }\n\n  addActionCard(actionCard: ActionCard) {\n    this.actionCards.push(actionCard);\n    const card = {\n      actionName: actionCard.actionName,\n      expectedDuration: actionCard.expectedDuration,\n      isWork: actionCard.isWork.toString(),\n      date: actionCard.date,\n      realDuration: actionCard.realDuration.toString(),\n      emotion: actionCard.emotion,\n      isDone: actionCard.isDone.toString(),\n      id: actionCard.id,\n    };\n    axios\n      .post(\"/create_todo\", card, {\n        headers: { Token: localStorage.getItem(\"token\") || \"\" },\n      })\n      .then((response) =>\n        this.actionCards.map((action) =>\n          action.id === actionCard.id\n            ? { ...action, id: response.data }\n            : action\n        )\n      );\n  }\n\n  updateActionCard(id: string) {\n    const updatedCard = this.actionCards.filter(\n      (actionCard) => actionCard.id === id\n    );\n\n    const card = {\n      id: updatedCard[0].id,\n      actionName: updatedCard[0].actionName,\n      expectedDuration: updatedCard[0].expectedDuration,\n      isWork: updatedCard[0].isWork.toString(),\n      date: updatedCard[0].date,\n      realDuration: updatedCard[0].realDuration.toString(),\n      emotion: updatedCard[0].emotion,\n      isDone: updatedCard[0].isDone.toString(),\n    };\n\n    axios\n      .post(\"/update_todo\", card, {\n        headers: { Token: localStorage.getItem(\"token\") || \"\" },\n      })\n      .catch((_) => console.log(\"Error\"));\n  }\n\n  preparePlanningChart(date: string) {\n    const workActionCards = this.sortPlanner(date).filter(\n      (actionCard) => actionCard.isWork === true\n    );\n    const notWorkActionCards = this.sortPlanner(date).filter(\n      (actionCard) => actionCard.isWork === false\n    );\n\n    let totalMins1 = 0;\n    workActionCards.map((actionCard) => {\n      const arr = actionCard.expectedDuration.split(\":\");\n      totalMins1 += +arr[0] * 60 + +arr[1];\n      return totalMins1;\n    });\n\n    let totalMins2 = 0;\n    notWorkActionCards.map((actionCard) => {\n      const arr = actionCard.expectedDuration.split(\":\");\n      totalMins2 += +arr[0] * 60 + +arr[1];\n      return totalMins2;\n    });\n\n    let background = 0;\n    if (totalMins1 === 0 && totalMins2 === 0) {\n      background = 100;\n    }\n\n    const finalArr = [totalMins1, totalMins2, background];\n    return finalArr;\n  }\n\n  prepareDonePlansChart(date: string) {\n    let expectedDur = 0;\n    let realDur = 0;\n    this.sortPlanner(date).map((action) => {\n      const expectedDurArr = action.expectedDuration.split(\":\");\n      expectedDur += +expectedDurArr[0] * 3600 + +expectedDurArr[1] * 60;\n      realDur += action.realDuration;\n      return expectedDur && realDur;\n    });\n    let unDone = 100;\n    let done = (realDur * 100) / expectedDur;\n    if (realDur !== 0 || done > 1) {\n      unDone = 100 - done;\n    }\n    return [done, unDone];\n  }\n\n  actionCardsForSomePeriod(days: number) {\n    const today = moment();\n    const before = today.clone().subtract(days, \"days\");\n    const filteredArr = this.actionCards.filter((actionCard) => {\n      return (\n        moment(actionCard.date).isSameOrAfter(before, \"day\") &&\n        moment(actionCard.date).isSameOrBefore(today, \"day\")\n      );\n    });\n    return filteredArr;\n  }\n\n  changeRealDuration(id: string, time: number) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id\n        ? { ...actionCard, realDuration: actionCard.realDuration + time }\n        : actionCard\n    );\n  }\n\n  changeEmotion(id: string, value: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, emotion: value } : actionCard\n    );\n    this.updateActionCard(id);\n  }\n\n  changeActionName(id: string, val: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, actionName: val } : actionCard\n    );\n  }\n\n  changeExpectedDuration(id: string, val: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id\n        ? { ...actionCard, expectedDuration: val }\n        : actionCard\n    );\n  }\n\n  changeIsWork(id: string, val: boolean) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, isWork: val } : actionCard\n    );\n  }\n\n  removeActionCard(id: string) {\n    const removedCard = { id: id };\n    axios\n      .post(\"/remove_todo\", removedCard, {\n        headers: { Token: localStorage.getItem(\"token\") || \"\" },\n      })\n      .then((response) => {\n        this.actionCards = this.actionCards.filter(\n          (action) => action.id !== id\n        );\n      });\n  }\n\n  removeDatedActionCards(date: string) {\n    const message = { date: date };\n    axios\n      .post(\"/delete_dated_todos\", message, {\n        headers: { Token: localStorage.getItem(\"token\") || \"\" },\n      })\n      .then((response) => {\n        this.actionCards = this.actionCards.filter(\n          (action) => action.date !== date\n        );\n      });\n  }\n\n  removeAllActionCards() {\n    const message = \"remove all todos\";\n    axios\n      .post(\"/delete_all_todos\", message, {\n        headers: { Token: localStorage.getItem(\"token\") || \"\" },\n      })\n      .catch((_) => console.log(\"Error\"));\n    this.getActionCards();\n  }\n\n  completeActionCard(id: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id\n        ? { ...actionCard, isDone: !actionCard.isDone }\n        : actionCard\n    );\n    this.updateActionCard(id);\n  }\n\n  completeFinilisedActions(id: string) {\n    const finilisedActionCards = this.actionCards.filter(\n      (actionCard) => actionCard.id === id\n    );\n    let cards: {\n      actionName: string;\n      expectedDuration: string;\n      isWork: string;\n      date: string;\n      realDuration: string;\n      emotion: string;\n      isDone: string;\n    }[] = [];\n    finilisedActionCards.map((finilisedCard) => {\n      cards.push({\n        actionName: finilisedCard.actionName,\n        expectedDuration: finilisedCard.expectedDuration,\n        isWork: finilisedCard.isWork.toString(),\n        date: finilisedCard.date,\n        realDuration: finilisedCard.realDuration.toString(),\n        emotion: finilisedCard.emotion,\n        isDone: finilisedCard.isDone.toString(),\n      });\n      return cards;\n    });\n    const json = JSON.stringify(cards);\n    axios.post(\"/complete_finilisedtodos\", json);\n\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, isDone: true } : actionCard\n    );\n  }\n\n  sortPlanner(date: string) {\n    const sortedCards = this.actionCards.filter(\n      (actionCard) => actionCard.date === date\n    );\n    return sortedCards;\n  }\n\n  changeCard(card: ActionCard) {\n    const updatedCard = {\n      actionName: card.actionName,\n      expectedDuration: card.expectedDuration,\n      isWork: card.isWork.toString(),\n      date: card.date,\n      realDuration: card.realDuration.toString(),\n      emotion: card.emotion,\n      isDone: card.isDone.toString(),\n    };\n    const json = JSON.stringify(updatedCard);\n    axios.post(\"/change_todo\", json);\n  }\n}\n\nexport class LocalStorageStore implements Store {\n  actionCards: Array<ActionCard> = [];\n  profile = \"\";\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n  setProfile(name: string) {\n    this.profile = name;\n  }\n\n  async getActionCards() {\n    if (localStorage.getItem(LOCALSTORAGE_KEY) === null) {\n      this.actionCards = [];\n    } else {\n      const data = JSON.parse(localStorage.getItem(LOCALSTORAGE_KEY)!).actions;\n      this.actionCards = data;\n    }\n  }\n\n  async getUsername() {\n    this.profile = \"\";\n  }\n  addActionCard(actionCard: ActionCard) {\n    this.actionCards.push(actionCard);\n    this.save();\n  }\n\n  updateActionCard(id: string) {\n    this.save();\n  }\n\n  preparePlanningChart(date: string) {\n    const workActionCards = this.sortPlanner(date).filter(\n      (actionCard) => actionCard.isWork === true\n    );\n    const notWorkActionCards = this.sortPlanner(date).filter(\n      (actionCard) => actionCard.isWork === false\n    );\n\n    let totalMins1 = 0;\n    workActionCards.map((actionCard) => {\n      const arr = actionCard.expectedDuration.split(\":\");\n      totalMins1 += +arr[0] * 60 + +arr[1];\n      return totalMins1;\n    });\n\n    let totalMins2 = 0;\n    notWorkActionCards.map((actionCard) => {\n      const arr = actionCard.expectedDuration.split(\":\");\n      totalMins2 += +arr[0] * 60 + +arr[1];\n      return totalMins2;\n    });\n\n    let background = 0;\n    if (totalMins1 === 0 && totalMins2 === 0) {\n      background = 100;\n    }\n\n    const finalArr = [totalMins1, totalMins2, background];\n    return finalArr;\n  }\n\n  prepareDonePlansChart(date: string) {\n    let expectedDur = 0;\n    let realDur = 0;\n    this.sortPlanner(date).map((action) => {\n      const expectedDurArr = action.expectedDuration.split(\":\");\n      expectedDur += +expectedDurArr[0] * 3600 + +expectedDurArr[1] * 60;\n      realDur += action.realDuration;\n      return expectedDur && realDur;\n    });\n    let unDone = 100;\n    let done = (realDur * 100) / expectedDur;\n    if (realDur !== 0 || done > 1) {\n      unDone = 100 - done;\n    }\n    return [done, unDone];\n  }\n\n  actionCardsForSomePeriod(days: number) {\n    const today = moment();\n    const before = today.clone().subtract(days, \"days\");\n    const filteredArr = this.actionCards.filter((actionCard) => {\n      return (\n        moment(actionCard.date).isSameOrAfter(before, \"day\") &&\n        moment(actionCard.date).isSameOrBefore(today, \"day\")\n      );\n    });\n    return filteredArr;\n  }\n\n  changeRealDuration(id: string, time: number) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id\n        ? { ...actionCard, realDuration: actionCard.realDuration + time }\n        : actionCard\n    );\n    this.save();\n  }\n\n  changeEmotion(id: string, value: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, emotion: value } : actionCard\n    );\n    this.save();\n  }\n\n  changeActionName(id: string, val: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, actionName: val } : actionCard\n    );\n    this.save();\n  }\n\n  changeExpectedDuration(id: string, val: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id\n        ? { ...actionCard, expectedDuration: val }\n        : actionCard\n    );\n    this.save();\n  }\n\n  changeIsWork(id: string, val: boolean) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, isWork: val } : actionCard\n    );\n    this.save();\n  }\n\n  removeActionCard(id: string) {\n    this.actionCards = this.actionCards.filter(\n      (actionCard) => actionCard.id !== id\n    );\n    this.save();\n  }\n\n  removeDatedActionCards(date: string) {\n    this.actionCards = this.actionCards.filter(\n      (actionCard) => actionCard.date !== date\n    );\n    this.sortPlanner(date);\n    this.save();\n  }\n\n  removeAllActionCards() {\n    this.actionCards = [];\n    this.clearData();\n  }\n\n  completeActionCard(id: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id\n        ? { ...actionCard, isDone: !actionCard.isDone }\n        : actionCard\n    );\n    this.save();\n  }\n\n  completeFinilisedActions(id: string) {\n    this.actionCards = this.actionCards.map((actionCard) =>\n      actionCard.id === id ? { ...actionCard, isDone: true } : actionCard\n    );\n    this.save();\n  }\n\n  sortPlanner(date: string) {\n    const sortedCards = this.actionCards.filter(\n      (actionCard) => actionCard.date === date\n    );\n    return sortedCards;\n  }\n\n  save() {\n    const savedData = { actions: this.actionCards };\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(savedData));\n  }\n\n  clearData() {\n    localStorage.clear();\n  }\n}\n\nexport interface SavedData {\n  actions: ActionCard[];\n}\n","import Store, {\n  LocalStorageStore,\n  memoryLocalStorageKey,\n  tokenLocalStorageKey,\n} from \"./Store\";\nimport { makeAutoObservable } from \"mobx\";\n\nclass Store2 {\n  store: Store = new LocalStorageStore();\n  showOverlay = false;\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setStore(store: Store) {\n    this.store = store;\n  }\n\n  setShowOverlay(_: boolean) {\n    this.showOverlay = _;\n  }\n\n  clearStore() {\n    localStorage.removeItem(memoryLocalStorageKey);\n    localStorage.removeItem(tokenLocalStorageKey);\n    this.store = new LocalStorageStore();\n  }\n}\nconst store = new Store2();\nexport default store;\n","import { Table, Input, Select, Button } from \"antd\";\nimport \"./App.css\";\nimport store from \"./Store2\";\nimport { ActionType } from \"./Store\";\nimport { observer } from \"mobx-react-lite\";\n\ninterface Date {\n  date: string;\n}\n\nconst ActionForm = observer(({ date }: Date) => {\n  const list = store.store.actionCards.filter((action) => action.date === date);\n  const isResEmpty = list.length === 0;\n  const { Option } = Select;\n\n  const columns = [\n    {\n      title: \"Plans:\",\n      dataIndex: \"plans\",\n      key: \"plans\",\n    },\n    {\n      title: \"Duration:\",\n      dataIndex: \"duration\",\n      key: \"duration\",\n    },\n    {\n      title: \"Category:\",\n      dataIndex: \"category\",\n      key: \"category\",\n    },\n    {\n      title: \"\",\n      dataIndex: \"remove\",\n      key: \"remove\",\n    },\n  ];\n\n  const data = list.map((card) => {\n    return {\n      key: card.id,\n      plans: (\n        <Input\n          style={\n            card.isWork\n              ? {\n                  maxWidth: \"150px\",\n                  backgroundColor: \"rgba(142, 202, 230)\",\n                }\n              : {\n                  maxWidth: \"150px\",\n                  backgroundColor: \"rgba(255, 183, 3)\",\n                }\n          }\n          defaultValue={card.actionName}\n          onChange={(event) =>\n            store.store.changeActionName(card.id, event.target.value)\n          }\n        />\n      ),\n      duration: (\n        <Input\n          style={{\n            maxWidth: \"60px\",\n          }}\n          defaultValue={card.expectedDuration}\n          onChange={(event) =>\n            store.store.changeExpectedDuration(card.id, event.target.value)\n          }\n        />\n      ),\n      category: (\n        <Select\n          style={{\n            width: \"88px\",\n          }}\n          defaultValue={card.isWork ? ActionType.Work : ActionType.Rest}\n          onChange={(value) =>\n            store.store.changeIsWork(\n              card.id,\n              value === ActionType.Work ? true : false\n            )\n          }\n        >\n          <Option value={ActionType.Work}>{ActionType.Work}</Option>\n          <Option value={ActionType.Rest}>{ActionType.Rest}</Option>\n        </Select>\n      ),\n      remove: (\n        <Button onClick={() => store.store.removeActionCard(card.id)}>\n          Remove\n        </Button>\n      ),\n    };\n  });\n\n  return (\n    <>\n      {isResEmpty ? (\n        <div>\n          <p className=\"noTasks\">No plans for the day</p>\n        </div>\n      ) : (\n        <>\n          <Table\n            bordered={false}\n            size=\"small\"\n            columns={columns}\n            dataSource={data}\n            style={{\n              height: \"235px\",\n            }}\n            pagination={{\n              pageSize: 4,\n              hideOnSinglePage: true,\n              position: [\"bottomCenter\"],\n            }}\n          />\n        </>\n      )}\n    </>\n  );\n});\n\nexport default ActionForm;\n","import \"chart.js/auto\";\nimport { Chart } from \"react-chartjs-2\";\nimport store from \"./Store2\";\nimport { observer } from \"mobx-react-lite\";\n\nfunction PlanningChart({ date }: { date: string }) {\n  const chartData = {\n    datasets: [\n      {\n        id: 1,\n        label: `${store.store.actionCards.length}`,\n        data: store.store.preparePlanningChart(date),\n        backgroundColor: [\n          \"rgba(142, 202, 230, 1)\",\n          \"rgba(255, 183, 3, 0.8)\",\n          \"rgba(255,255,255)\",\n        ],\n        borderColor: [\"black\", \"black\"],\n        borderWidth: 0.2,\n      },\n    ],\n    labels: [\"Work (mins)\", \"Leisure (mins)\"],\n  };\n\n  return (\n    <div className=\"chartPlanning\">\n      <Chart\n        datasetIdKey={`${Math.random()}`}\n        type=\"pie\"\n        data={chartData}\n        options={{\n          color: \"#023047\",\n          font: {\n            family: \"PTSansRegular\",\n          },\n        }}\n      />\n      <p className=\"chart_description\">Time allocation</p>\n    </div>\n  );\n}\n\nexport default observer(PlanningChart);\n","import { useState, useEffect } from \"react\";\nimport store from \"./Store2\";\nimport { LocalStorageStore, ServerStore, memoryLocalStorageKey } from \"./Store\";\nimport axios from \"axios\";\nimport { observer } from \"mobx-react-lite\";\nimport { Modal, Button, Input, Space } from \"antd\";\n\nconst MemoryOverlay = observer(() => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [regUsername, setRegUsername] = useState(\"\");\n  const [regPassword, setRegPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [errorMessageAuth, setErrorMessageAuth] = useState(\"\");\n  const [showRegForm, setShowRegForm] = useState(false);\n\n  const sendLoginForm = function () {\n    const userCard = {\n      username: username,\n      password: password,\n    };\n\n    const json = JSON.stringify(userCard);\n\n    axios\n      .post(\"/login\", json)\n      .then((response) => {\n        if (response.data === \"failed\") {\n          setErrorMessageAuth(\n            \"Your login or (and) password are incorrect. Try again.\"\n          );\n          setUsername(\"\");\n          setPassword(\"\");\n          return;\n        }\n        localStorage.setItem(memoryLocalStorageKey, \"server\");\n        const token = response.data;\n        const localStorageKey = \"token\";\n        localStorage.setItem(localStorageKey, token);\n        store.setStore(new ServerStore());\n        store.store.getUsername();\n        store.store.getActionCards();\n        setShowRegForm(false);\n      })\n      .catch((err) => {\n        setErrorMessageAuth(\"Server does not respond\");\n        setUsername(\"\");\n        setPassword(\"\");\n      });\n  };\n\n  function register() {\n    const userCard = {\n      username: regUsername,\n      password: regPassword,\n    };\n    const json = JSON.stringify(userCard);\n\n    axios\n      .post(\"/register\", json)\n      .then((response) => {\n        if (response.data === \"failed\") {\n          setErrorMessage(\n            \"Inserted login is aleady taken. Please try another one.\"\n          );\n          setRegUsername(\"\");\n          setRegPassword(\"\");\n          return;\n        }\n        localStorage.setItem(memoryLocalStorageKey, \"server\");\n        const token = response.data;\n        const localStorageKey = \"token\";\n        localStorage.setItem(localStorageKey, token);\n        store.setStore(new ServerStore());\n        store.store.getUsername();\n        store.store.getActionCards();\n        setShowRegForm(false);\n      })\n      .catch((err) => {\n        if (err.response.status === 500) {\n          setErrorMessage(\"Server does not respond.\");\n          setRegUsername(\"\");\n          setRegPassword(\"\");\n        } else {\n          throw err;\n        }\n      });\n  }\n\n  useEffect(() => {\n    if (localStorage.getItem(memoryLocalStorageKey) === \"localStorage\") {\n      store.setStore(new LocalStorageStore());\n      store.setShowOverlay(false);\n      store.store.getActionCards();\n    } else if (localStorage.getItem(memoryLocalStorageKey) === \"server\") {\n      if (localStorage.getItem(\"token\") !== \"\") {\n        store.setStore(new ServerStore());\n        store.store.getUsername();\n        store.setShowOverlay(false);\n        store.store.getActionCards();\n      }\n    } else {\n      store.setShowOverlay(true);\n    }\n  }, []);\n\n  return (\n    <>\n      <Modal\n        visible={store.showOverlay}\n        centered={true}\n        closable={false}\n        maskClosable={false}\n        footer={null}\n        style={{\n          textAlign: \"center\",\n        }}\n      >\n        <h1 style={{ color: \"#023047\" }}>\n          By default, your tasks are stored in LocalStorage. But you can choose\n          to store the data on the server.\n        </h1>\n        <Button\n          className=\"login_button\"\n          key=\"localStorage\"\n          onClick={() => {\n            localStorage.setItem(\"memory\", \"localStorage\");\n            store.setStore(new LocalStorageStore());\n            store.store.getActionCards();\n            store.setShowOverlay(false);\n          }}\n        >\n          Store in LocalStorage\n        </Button>\n        <Button\n          key=\"server\"\n          onClick={() => {\n            store.setShowOverlay(false);\n            setShowRegForm(true);\n          }}\n          className=\"login_button\"\n        >\n          Store on the server\n        </Button>\n      </Modal>\n      <Modal\n        visible={showRegForm}\n        centered={true}\n        closable={false}\n        maskClosable={false}\n        footer={null}\n        style={{\n          textAlign: \"center\",\n        }}\n      >\n        <Space direction=\"vertical\">\n          <h1 className=\"login_text\">\n            Please login to save your data on the server:\n          </h1>\n          <Input\n            defaultValue={username}\n            placeholder=\"Login\"\n            onChange={(event) => setUsername(event.target.value)}\n            className=\"login_input\"\n          />\n          <Input\n            defaultValue={password}\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={(event) => setPassword(event.target.value)}\n            className=\"login_input\"\n          />\n          <Button onClick={sendLoginForm} className=\"login_button\">\n            Login\n          </Button>\n          <p className=\"text\">{errorMessageAuth}</p>\n          <h1 className=\"login_text\">\n            If you don't have an account, please, register:\n          </h1>\n          <Input\n            defaultValue={regUsername}\n            type=\"text\"\n            placeholder=\"Login\"\n            onChange={(event) => setRegUsername(event.target.value)}\n            className=\"login_input\"\n          />\n          <Input\n            defaultValue={regPassword}\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={(event) => setRegPassword(event.target.value)}\n            className=\"login_input\"\n          />\n          <Button className=\"login_button\" onClick={register}>\n            Register\n          </Button>\n          <p className=\"memoryRequest_form_error\">{errorMessage}</p>\n          <Button\n            className=\"login_button\"\n            onClick={() => {\n              localStorage.setItem(\"memory\", \"localStorage\");\n              store.setStore(new LocalStorageStore());\n              store.setShowOverlay(false);\n              setShowRegForm(false);\n            }}\n          >\n            Save data in LocalStorage\n          </Button>\n        </Space>\n      </Modal>\n    </>\n  );\n});\n\nexport default MemoryOverlay;\n","import { useState } from \"react\";\nimport { Input, Form, Select, Button, Dropdown, Menu, TimePicker } from \"antd\";\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport \"./App.css\";\nimport { DatePicker } from \"@blueprintjs/datetime\";\nimport moment from \"moment\";\nimport MomentLocaleUtils from \"react-day-picker/moment\";\nimport \"moment/locale/ru\";\nimport { nanoid } from \"nanoid\";\nimport { ActionType } from \"./Store\";\nimport store from \"./Store2\";\nimport ActionForm from \"./ActionForm\";\nimport PlanningChart from \"./PlanningChart\";\nimport MemoryOverlay from \"./MemoryOverlay\";\nimport { observer } from \"mobx-react-lite\";\nimport MenuItem from \"antd/lib/menu/MenuItem\";\n\nmoment.locale(\"en\");\n\nconst Planning = observer(() => {\n  const [form] = Form.useForm();\n  const { Option } = Select;\n  const [val, setVal] = useState(new Date());\n  const stringDate = moment(val).format(\"dddd (D MMMM YYYY)\");\n  const currentDate = moment(val).format(\"YYYY-MM-DD\");\n  const initActionForm = {\n    id: nanoid(),\n    actionName: \"\",\n    expectedDuration: \"\",\n    isWork: true,\n    date: currentDate,\n    realDuration: 0,\n    emotion: 0,\n    isDone: false,\n  };\n\n  const [adder, setAdder] = useState([initActionForm]);\n  const format = \"HH:mm\";\n  const menu = (\n    <Menu>\n      <MenuItem>\n        <p\n          onClick={() => {\n            setAdder(adder.filter((action) => action.date !== currentDate));\n            store.store.removeDatedActionCards(currentDate);\n          }}\n          className=\"text\"\n        >\n          Delete the plans for the day\n        </p>\n      </MenuItem>\n      <MenuItem>\n        <p\n          onClick={() => {\n            setAdder([initActionForm]);\n            store.store.removeAllActionCards();\n          }}\n          className=\"text\"\n        >\n          Delete all plans\n        </p>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <>\n      <div className=\"space\">\n        <div className=\"block_date_and_icon\">\n          <div className=\"block_date\">\n            <h1 className=\"date\">{stringDate}</h1>\n          </div>\n          <div className=\"block_icon\">\n            <Dropdown overlay={menu} placement=\"bottomLeft\" trigger={[\"click\"]}>\n              <Button\n                icon={<EllipsisOutlined />}\n                style={{ border: \"0px solid transparent\" }}\n              />\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n      <div className=\"mainBlock\">\n        <div className=\"block_calendar\">\n          <DatePicker\n            className=\"calendar\"\n            value={val}\n            onChange={(date) => setVal(date)}\n            locale=\"en\"\n            localeUtils={MomentLocaleUtils}\n          />\n        </div>\n        <div className=\"block_plans\">\n          <ActionForm date={currentDate} />\n        </div>\n        <div className=\"block_chart\">\n          <PlanningChart date={currentDate} />\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div className=\"footer_form\">\n          <Form\n            form={form}\n            layout=\"inline\"\n            onFinish={(values) => {\n              setAdder([\n                ...adder,\n                {\n                  id: nanoid(),\n                  actionName: values.action,\n                  expectedDuration: moment(values.duration).format(format),\n                  isWork: values.category === ActionType.Work ? true : false,\n                  date: currentDate,\n                  realDuration: 0,\n                  emotion: 0,\n                  isDone: false,\n                },\n              ]);\n\n              store.store.addActionCard({\n                id: nanoid(),\n                actionName: values.action,\n                expectedDuration: moment(values.duration).format(format),\n                isWork: values.category === ActionType.Work ? true : false,\n                date: currentDate,\n                realDuration: 0,\n                emotion: \"😊\",\n                isDone: false,\n              });\n              form.resetFields();\n            }}\n          >\n            <Form.Item\n              name=\"action\"\n              label={\n                <label\n                  style={{\n                    color: \"#023047\",\n                    fontFamily: \"PTSansRegular\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Plans\n                </label>\n              }\n              rules={[{ required: true, message: \"To be inserted\" }]}\n            >\n              <Input\n                placeholder=\"Insert your task\"\n                style={{\n                  width: \"150px\",\n                  border: \"0.5px solid #023047\",\n                }}\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"duration\"\n              label={\n                <label\n                  style={{\n                    color: \"#023047\",\n                    fontFamily: \"PTSansRegular\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Duration\n                </label>\n              }\n              rules={[\n                {\n                  required: true,\n                  message: \"To be inserted\",\n                },\n                ({ getFieldValue }) => ({\n                  validator(_, value) {\n                    if (moment(value).format(format) === \"00:00\") {\n                      return Promise.reject(\n                        \"Please enter duration of the task\"\n                      );\n                    } else {\n                      return Promise.resolve();\n                    }\n                  },\n                }),\n              ]}\n            >\n              <TimePicker\n                placeholder=\"hh:mm\"\n                format={format}\n                style={{\n                  width: \"100px\",\n                  border: \"0.5px solid #023047\",\n                }}\n                showNow={false}\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"category\"\n              label={\n                <label\n                  style={{\n                    color: \"#023047\",\n                    fontFamily: \"PTSansRegular\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Category\n                </label>\n              }\n              rules={[{ required: true, message: \"To be inserted\" }]}\n            >\n              <Select\n                placeholder=\"Select\"\n                optionFilterProp=\"children\"\n                style={{\n                  width: \"90px\",\n                  border: \"0.5px solid #023047\",\n                }}\n              >\n                <Option value={ActionType.Work}>{ActionType.Work}</Option>\n                <Option value={ActionType.Rest}>{ActionType.Rest}</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item name=\"saveButton\">\n              <Button\n                htmlType=\"submit\"\n                style={{\n                  backgroundColor: \"rgba(255, 183, 3, 0.8)\",\n                  fontFamily: \"PTSansRegular\",\n                  color: \"#023047\",\n                  fontWeight: \"bold\",\n                  // border: \"1px solid #023047\",\n                }}\n              >\n                Save\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n      </div>\n      <MemoryOverlay />\n    </>\n  );\n});\n\nexport default Planning;\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"antd\";\nimport { CaretRightOutlined, PauseOutlined } from \"@ant-design/icons\";\nimport store from \"./Store2\";\n\nconst Clock = observer(\n  ({\n    id,\n    duration,\n    isButtonDisabled,\n  }: {\n    id: string;\n    duration: number;\n    isButtonDisabled: boolean;\n  }) => {\n    const clock = duration;\n    const [clockEnabled, setClockEnabled] = useState(false);\n\n    useEffect(() => {\n      if (!clockEnabled || isButtonDisabled) {\n        return;\n      }\n      const timerId = setInterval(() => {\n        store.store.changeRealDuration(id, 1);\n      }, 1000);\n      return () => {\n        clearInterval(timerId);\n      };\n    }, [id, clockEnabled, isButtonDisabled]);\n\n    let minutes;\n    if (Math.floor(clock / 60) < 10) {\n      minutes = \"0\" + Math.floor(clock / 60);\n    } else {\n      minutes = Math.floor(clock / 60);\n    }\n\n    let seconds;\n    if (clock - Math.floor(clock / 60) * 60 < 10) {\n      seconds = \"0\" + (clock - Math.floor(clock / 60) * 60);\n    } else {\n      seconds = clock - Math.floor(clock / 60) * 60;\n    }\n\n    const res = minutes + \":\" + seconds;\n\n    return (\n      <div className=\"clock\" style={{ width: \"75px\" }}>\n        <div className=\"tableElem\">{res}</div>\n        <div className=\"tableElem\">\n          <Button\n            size=\"small\"\n            disabled={isButtonDisabled}\n            onClick={() => {\n              setClockEnabled(!clockEnabled);\n              if (clockEnabled) {\n                store.store.updateActionCard(id);\n              }\n            }}\n            icon={!clockEnabled ? <CaretRightOutlined /> : <PauseOutlined />}\n          ></Button>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Clock;\n","import { observer } from \"mobx-react-lite\";\nimport { Table, Select, Button } from \"antd\";\nimport \"./App.css\";\nimport { ActionType } from \"./Store\";\nimport store from \"./Store2\";\nimport moment from \"moment\";\nimport Clock from \"./Clock\";\nimport \"moment/locale/ru\";\n\nconst ActionList = observer(() => {\n  const currentDate = moment().format(\"YYYY-MM-DD\");\n  const { Option } = Select;\n  const list = store.store.actionCards.filter(\n    (actionCard) => actionCard.date === currentDate\n  );\n\n  const columns = [\n    {\n      title: \"Your plans:\",\n      dataIndex: \"plans\",\n      key: \"plans\",\n    },\n    {\n      title: \"Category:\",\n      dataIndex: \"category\",\n      key: \"category\",\n    },\n    {\n      title: \"Stopwatch:\",\n      dataIndex: \"stopwatch\",\n      key: \"stopwatch\",\n    },\n    {\n      title: \"Mood:\",\n      dataIndex: \"emotion\",\n      key: \"emotion\",\n    },\n    {\n      title: \"\",\n      dataIndex: \"remove\",\n      key: \"remove\",\n    },\n  ];\n\n  const data = list.map((card) => {\n    return {\n      key: card.id,\n      plans: (\n        <div\n          style={\n            card.isWork\n              ? {\n                  width: \"160px\",\n                  backgroundColor: \"rgba(142, 202, 230)\",\n                }\n              : {\n                  width: \"160px\",\n                  backgroundColor: \"rgba(255, 183, 3)\",\n                }\n          }\n        >\n          {card.actionName + ` (${card.expectedDuration})`}\n        </div>\n      ),\n      category: <div>{card.isWork ? ActionType.Work : ActionType.Rest}</div>,\n      stopwatch: (\n        <Clock\n          id={card.id}\n          duration={card.realDuration}\n          isButtonDisabled={card.isDone || false}\n        />\n      ),\n      emotion: (\n        <Select\n          defaultValue=\"😊\"\n          disabled={card.isDone || false}\n          onChange={(value) => store.store.changeEmotion(card.id, value)}\n        >\n          <Option value=\"😊\">😊</Option>\n          <Option value=\"😐\">😐</Option>\n          <Option value=\"☹️\">☹️</Option>\n        </Select>\n      ),\n      remove: (\n        <Button onClick={() => store.store.completeActionCard(card.id)}>\n          {card.isDone ? \"Cancel\" : \"Finish\"}\n        </Button>\n      ),\n    };\n  });\n\n  if (list.length === 0) {\n    return (\n      <div className=\"mainBlock2\">\n        <h4 className=\"noTasks\">No plans for today.</h4>\n      </div>\n    );\n  } else {\n    return (\n      <Table\n        style={{ color: \"#023047\" }}\n        columns={columns}\n        dataSource={data}\n        size=\"small\"\n        bordered={false}\n        pagination={{\n          pageSize: 4,\n        }}\n      />\n    );\n  }\n});\n\nexport default ActionList;\n","import \"chart.js/auto\";\nimport { Chart } from \"react-chartjs-2\";\nimport { Card } from \"antd\";\nimport store from \"./Store2\";\nimport { observer } from \"mobx-react-lite\";\n\nfunction EmotionChart({ date }: { date: string }) {\n  let stringEmotion;\n  function prepareEmotionChart(date: string) {\n    const badEmotionCards = store.store\n      .sortPlanner(date)\n      .filter((actionCard) => actionCard.emotion === \"☹️\");\n    const middleEmotionCards = store.store\n      .sortPlanner(date)\n      .filter((actionCard) => actionCard.emotion === \"😐\");\n    const goodEmotionCards = store.store\n      .sortPlanner(date)\n      .filter((actionCard) => actionCard.emotion === \"😊\");\n\n    const badEmotion = badEmotionCards.reduce((acc, val) => {\n      return acc + val.realDuration / 60;\n    }, 0);\n\n    const middleEmotion = middleEmotionCards.reduce((acc, val) => {\n      return acc + val.realDuration / 60;\n    }, 0);\n\n    const goodEmotion = goodEmotionCards.reduce((acc, val) => {\n      return acc + val.realDuration / 60;\n    }, 0);\n\n    let background = 0;\n    if (badEmotion === 0 && middleEmotion === 0 && goodEmotion === 0) {\n      background = 100;\n    }\n\n    const arr = [goodEmotion, middleEmotion, badEmotion, background];\n\n    if (goodEmotion > middleEmotion && goodEmotion > badEmotion) {\n      stringEmotion = \"excellent\";\n    } else if (middleEmotion > goodEmotion && middleEmotion > badEmotion) {\n      stringEmotion = \"good\";\n    } else if (badEmotion > goodEmotion && badEmotion > middleEmotion) {\n      stringEmotion = \"badly\";\n    }\n\n    return arr;\n  }\n  const data = prepareEmotionChart(date);\n\n  const chartData = {\n    labels: [\"😊 (min)\", \"😐 (min)\", \"☹️ (min)\"],\n    datasets: [\n      {\n        id: 1,\n        label: `${store.store.actionCards.length}`,\n        data,\n        backgroundColor: [\n          \"rgba(167, 201, 87, 1)\",\n          \"rgba(255, 223, 82, 1)\",\n          \"rgba(188, 71, 73, 1)\",\n          \"rgba(243, 246, 224, 0.5)\",\n        ],\n        borderColor: [\"black\", \"black\", \"black\"],\n        borderWidth: 0.2,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Card\n        style={{\n          backgroundColor: \"#023047\",\n          color: \"rgba(255, 183, 3)\",\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n          height: \"354px\",\n        }}\n      >\n        <Chart\n          datasetIdKey={`${store.store.actionCards.length}`}\n          type=\"pie\"\n          data={chartData}\n          options={{\n            color: \"rgba(255, 183, 3)\",\n            font: {\n              family: \"PTSansRegular\",\n            },\n          }}\n        />\n        <p>Mostly completing tasks you felt {stringEmotion}</p>\n      </Card>\n    </div>\n  );\n}\n\nexport default observer(EmotionChart);\n","import \"chart.js/auto\";\nimport { Chart } from \"react-chartjs-2\";\nimport store from \"./Store2\";\nimport \"moment/locale/ru\";\nimport { Card } from \"antd\";\nimport { observer } from \"mobx-react-lite\";\n\nconst DonePlansChart = observer(({ date }: { date: string }) => {\n  const data = store.store.prepareDonePlansChart(date);\n\n  const chartData = {\n    labels: [\"Done (%)\", \"To be done (%)\"],\n    datasets: [\n      {\n        id: 1,\n        label: `${store.store.actionCards.length}`,\n        data,\n        backgroundColor: [\"rgba(255, 183, 3, 0.8)\", \"rgba(243, 246, 224, 1)\"],\n        borderColor: [\"black\", \"black\"],\n        borderWidth: 0.2,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Card\n        style={{\n          backgroundColor: \"#023047\",\n          color: \"rgba(255, 183, 3)\",\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n          height: \"354px\",\n        }}\n      >\n        <Chart\n          datasetIdKey={`${store.store.actionCards.length}`}\n          type=\"pie\"\n          data={chartData}\n          options={{\n            color: \"rgba(255, 183, 3)\",\n            font: {\n              family: \"PTSansRegular\",\n            },\n          }}\n        />\n        <p>\n          Your tasks were completed by{\" \"}\n          {isNaN(Math.floor(data[0])) ? \"0\" : Math.floor(data[0])}%\n        </p>\n      </Card>\n    </div>\n  );\n});\n\nexport default DonePlansChart;\n","import \"./App.css\";\nimport ActionList from \"./ActionList\";\nimport moment from \"moment\";\nimport \"moment/locale/ru\";\nimport { observer } from \"mobx-react-lite\";\nimport { Carousel } from \"antd\";\nimport MemoryOverlay from \"./MemoryOverlay\";\nimport EmotionChart from \"./EmotionChart\";\nimport DonePlansChart from \"./DonePlansChart\";\n\nconst MyDay = observer(() => {\n  const stringDate = moment(new Date()).format(\"dddd (D MMMM YYYY)\");\n\n  return (\n    <div className=\"mainBlock_myDay\">\n      <div className=\"mainBlock_myDay_plans\">\n        <div>\n          <h1 style={{ color: \"#023047\" }}>{stringDate}</h1>\n        </div>\n        <div>\n          <ActionList />\n        </div>\n      </div>\n      <div className=\"mainBlock_myDay_charts\">\n        <div className=\"myDay_charts_container\">\n          <Carousel>\n            <EmotionChart date={moment().format(\"YYYY-MM-DD\")} />\n            <DonePlansChart date={moment().format(\"YYYY-MM-DD\")} />\n          </Carousel>\n        </div>\n        <MemoryOverlay />\n      </div>\n    </div>\n  );\n});\n\nexport default MyDay;\n","import { observer } from \"mobx-react-lite\";\nimport \"./App.css\";\nimport store from \"./Store2\";\nimport { Chart } from \"react-chartjs-2\";\nimport { Carousel, Card } from \"antd\";\n\nfunction WeeklyReport({ days }: { days: number }) {\n  function PrepareDataChart() {\n    let expectedDur = 0;\n    let realDur = 0;\n    store.store.actionCardsForSomePeriod(days).map((action) => {\n      const expectedDurArr = action.expectedDuration.split(\":\");\n      expectedDur += +expectedDurArr[0] * 3600 + +expectedDurArr[1] * 60;\n      realDur += action.realDuration;\n      return realDur;\n    });\n    let unDone = 100;\n    let done = (realDur * 100) / expectedDur;\n    if (realDur !== 0 || done > 1) {\n      unDone = 100 - done;\n    }\n    return [done, unDone];\n  }\n\n  const data1 = PrepareDataChart();\n\n  const chartData1 = {\n    labels: [\"Done (%)\", \"To be done (%)\"],\n    datasets: [\n      {\n        id: 1,\n        label: `${store.store.actionCards.length}`,\n        data: data1,\n        backgroundColor: [\"rgba(255, 183, 3, 0.8)\", \"rgba(243, 246, 224, 1)\"],\n        borderColor: [\"black\", \"black\"],\n        borderWidth: 0.2,\n      },\n    ],\n  };\n\n  let stringEmotion;\n  function prepareEmotionChart() {\n    const badEmotionCards = store.store\n      .actionCardsForSomePeriod(days)\n      .filter((actionCard) => actionCard.emotion === \"☹️\");\n    const middleEmotionCards = store.store\n      .actionCardsForSomePeriod(days)\n      .filter((actionCard) => actionCard.emotion === \"😐\");\n    const goodEmotionCards = store.store\n      .actionCardsForSomePeriod(days)\n      .filter((actionCard) => actionCard.emotion === \"😊\");\n\n    let badEmotion = 0;\n    badEmotionCards.map((actionCard) => {\n      badEmotion += actionCard.realDuration / 60;\n      return badEmotion;\n    });\n\n    let middleEmotion = 0;\n    middleEmotionCards.map((actionCard) => {\n      middleEmotion += actionCard.realDuration / 60;\n      return middleEmotion;\n    });\n\n    let goodEmotion = 0;\n    goodEmotionCards.map((actionCard) => {\n      goodEmotion += actionCard.realDuration / 60;\n      return goodEmotion;\n    });\n\n    let background = 0;\n    if (badEmotion === 0 && middleEmotion === 0 && goodEmotion === 0) {\n      background = 100;\n    }\n\n    const arr = [goodEmotion, middleEmotion, badEmotion, background];\n\n    if (goodEmotion > middleEmotion && goodEmotion > badEmotion) {\n      stringEmotion = \"excellent\";\n    } else if (middleEmotion > goodEmotion && middleEmotion > badEmotion) {\n      stringEmotion = \"good\";\n    } else if (badEmotion > goodEmotion && badEmotion > middleEmotion) {\n      stringEmotion = \"badly\";\n    }\n    return arr;\n  }\n\n  const chartData2 = {\n    labels: [\"😊 (min)\", \"😐 (min)\", \"☹️ (min)\"],\n    datasets: [\n      {\n        id: 1,\n        label: `${store.store.actionCards.length}`,\n        data: prepareEmotionChart(),\n        backgroundColor: [\n          \"rgba(167, 201, 87, 1)\",\n          \"rgba(255, 223, 82, 1)\",\n          \"rgba(188, 71, 73, 1)\",\n          \"rgba(243, 246, 224, 0.5)\",\n        ],\n        borderColor: [\"black\", \"black\", \"black\"],\n        borderWidth: 0.2,\n      },\n    ],\n  };\n\n  let stringCategory;\n  function prepareCategoryChart() {\n    const workActionCards = store.store\n      .actionCardsForSomePeriod(days)\n      .filter((actionCard) => actionCard.isWork === true);\n    const notWorkActionCards = store.store\n      .actionCardsForSomePeriod(days)\n      .filter((actionCard) => actionCard.isWork === false);\n\n    let totalMins1 = 0;\n    workActionCards.map((actionCard) => {\n      totalMins1 += actionCard.realDuration / 60;\n      return totalMins1;\n    });\n\n    let totalMins2 = 0;\n    notWorkActionCards.map((actionCard) => {\n      totalMins2 += actionCard.realDuration / 60;\n      return totalMins2;\n    });\n\n    if (totalMins1 > totalMins2) {\n      stringCategory = '\"Work\"';\n    } else if (totalMins1 < totalMins2) {\n      stringCategory = '\"Leisure\"';\n    } else {\n      stringCategory = \"\";\n    }\n\n    let background = 0;\n    if (totalMins1 === 0 && totalMins2 === 0) {\n      background = 100;\n    }\n\n    const finalArr = [totalMins1, totalMins2, background];\n    return finalArr;\n  }\n\n  const chartData3 = {\n    labels: [\"Work (mins)\", \"Leisure (mins)\"],\n    datasets: [\n      {\n        id: 1,\n        label: `${store.store.actionCards.length}`,\n        data: prepareCategoryChart(),\n        backgroundColor: [\n          \"rgba(142, 202, 230)\",\n          \"rgba(255, 183, 3, 0.8)\",\n          \"rgba(243, 246, 224, 0.5)\",\n        ],\n        borderColor: [\"black\", \"black\"],\n        borderWidth: 0.2,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"statistics_report_container\">\n      <Carousel>\n        <div className=\"statistics_report_card\">\n          <Card\n            style={{\n              backgroundColor: \"#023047\",\n              color: \"rgba(255, 183, 3)\",\n              fontWeight: \"bold\",\n            }}\n          >\n            <Chart\n              datasetIdKey={`${store.store.actionCards.length}`}\n              type=\"pie\"\n              data={chartData3}\n              options={{\n                color: \"rgba(255, 183, 3)\",\n                font: {\n                  family: \"PTSansRegular\",\n                },\n              }}\n            />\n            <p>Mostly you performed tasks from the category {stringCategory}</p>\n          </Card>\n        </div>\n\n        <div className=\"statistics_report_card\">\n          <Card\n            style={{\n              backgroundColor: \"#023047\",\n              color: \"rgba(255, 183, 3)\",\n              fontWeight: \"bold\",\n            }}\n          >\n            <Chart\n              datasetIdKey={`${store.store.actionCards.length}`}\n              type=\"pie\"\n              data={chartData2}\n              options={{\n                color: \"rgba(255, 183, 3)\",\n                font: {\n                  family: \"PTSansRegular\",\n                },\n              }}\n            />\n            <p>Mostly completing tasks you felt {stringEmotion}</p>\n          </Card>\n        </div>\n\n        <div className=\"statistics_report_card\">\n          <Card\n            style={{\n              backgroundColor: \"#023047\",\n              color: \"rgba(255, 183, 3)\",\n              fontWeight: \"bold\",\n              minHeight: \"354px\",\n            }}\n          >\n            <Chart\n              datasetIdKey={`${store.store.actionCards.length}`}\n              type=\"pie\"\n              data={chartData1}\n              options={{\n                color: \"rgba(255, 183, 3)\",\n                font: {\n                  family: \"PTSansRegular\",\n                },\n              }}\n            />\n            <p>\n              Your tasks were completed by{\" \"}\n              {isNaN(Math.floor(data1[0])) ? \"0\" : Math.floor(data1[0])}%\n            </p>\n          </Card>\n        </div>\n      </Carousel>\n    </div>\n  );\n}\n\nexport default observer(WeeklyReport);\n","import { useState } from \"react\";\nimport { Menu, Dropdown } from \"antd\";\nimport \"./App.css\";\nimport WeeklyReport from \"./WeeklyReport\";\nimport MemoryOverlay from \"./MemoryOverlay\";\n\nenum ReportType {\n  Weekly = \"last week\",\n  Monthly = \"last month\",\n  Annually = \"last year\",\n}\n\nfunction Statistics() {\n  const [statistics, setStatistics] = useState(\"last week\");\n  let days = 7;\n\n  if (statistics === ReportType.Monthly) {\n    days = 30;\n  } else if (statistics === ReportType.Annually) {\n    days = 365;\n  }\n\n  const menu = (\n    <Menu>\n      <Menu.Item key=\"0\">\n        <p\n          className=\"statistics_text\"\n          onClick={() => setStatistics(ReportType.Weekly)}\n        >\n          {ReportType.Weekly}\n        </p>\n      </Menu.Item>\n      <Menu.Item key=\"1\">\n        <p\n          className=\"statistics_text\"\n          onClick={() => setStatistics(ReportType.Monthly)}\n        >\n          {ReportType.Monthly}\n        </p>\n      </Menu.Item>\n      <Menu.Item key=\"2\">\n        <p\n          className=\"statistics_text\"\n          onClick={() => setStatistics(ReportType.Annually)}\n        >\n          {ReportType.Annually}\n        </p>\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <>\n      <div className=\"statistics_range\">\n        <div className=\"statistics_text_container\">\n          <h1 className=\"statistics_text\">\n            Analyze your results for the{\" \"}\n            <Dropdown overlay={menu}>\n              <span className=\"statistics_text statistics_link\">\n                {statistics}\n              </span>\n            </Dropdown>\n          </h1>\n        </div>\n      </div>\n      <WeeklyReport days={days} />\n      <MemoryOverlay />\n    </>\n  );\n}\nexport default Statistics;\n","import { Menu, MenuItem, Button } from \"@blueprintjs/core\";\nimport store from \"./Store2\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { observer } from \"mobx-react-lite\";\nimport { Dropdown } from \"antd\";\n\nconst Profile = observer(() => {\n  const exampleMenu = (\n    <Menu>\n      <MenuItem\n        key=\"1\"\n        icon=\"log-out\"\n        text=\"Log out\"\n        onClick={() => {\n          store.store.setProfile(\"\");\n          store.clearStore();\n          store.setShowOverlay(true);\n        }}\n      />\n    </Menu>\n  );\n\n  if (store.store.profile === \"\") {\n    return (\n      <Button\n        minimal={true}\n        className=\"menu_link\"\n        onClick={() => {\n          store.clearStore();\n          store.setShowOverlay(true);\n        }}\n      >\n        Log in\n      </Button>\n    );\n  } else {\n    return (\n      <div className=\"profile\">\n        <Dropdown overlay={exampleMenu}>\n          <Button minimal={true} style={{ color: \"#023047\" }}>\n            <UserOutlined /> {store.store.profile}\n          </Button>\n        </Dropdown>\n      </div>\n    );\n  }\n});\n\nexport default Profile;\n","import \"./App.css\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport Planning from \"./Planning\";\nimport MyDay from \"./MyDay\";\nimport Statistics from \"./Statistics\";\nimport Profile from \"./Profile\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"logo_container\">\n        <p className=\"logo_name\">Planner</p>\n      </div>\n      <div className=\"menu\">\n        <Link to=\"/Planning\" className=\"menu_link active\">\n          Planning\n        </Link>\n        <Link to=\"/MyDay\" className=\"menu_link\">\n          My day\n        </Link>\n        <Link to=\"/Statistics\" className=\"menu_link\">\n          Statistics\n        </Link>\n        <Profile />\n      </div>\n      <Routes>\n        <Route path=\"/\" element={<Planning />} />\n        <Route path=\"/Planning\" element={<Planning />} />\n        <Route path=\"/MyDay\" element={<MyDay />} />\n        <Route path=\"/Statistics\" element={<Statistics />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}